==============================================================================================================================

Q1. Program to find all pairs of an integer array whose sum is equal to a given number:

==============================================================================================================================

def find_pairs(arr, target_sum):
    pairs = []
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] + arr[j] == target_sum:
                pairs.append((arr[i], arr[j]))
    return pairs

# Example usage
arr = [1, 5, 2, 3, 7, 8, 4]
target_sum = 10
print(find_pairs(arr, target_sum)) # Output: [(1, 9), (5, 5), (2, 8), (3, 7), (4, 6)]

==============================================================================================================================
Q2. Program to reverse an array in place:

==============================================================================================================================

def reverse_array(arr):
    start = 0
    end = len(arr) - 1
    while start < end:
        arr[start], arr[end] = arr[end], arr[start]
        start += 1
        end -= 1

# Example usage
arr = [1, 2, 3, 4, 5]
reverse_array(arr)
print(arr) # Output: [5, 4, 3, 2, 1]

==============================================================================================================================
Q3. Program to check if two strings are a rotation of each other:
==============================================================================================================================

def are_rotations(str1, str2):
    if len(str1) != len(str2):
        return False
    temp = str1 + str1
    if str2 in temp:
        return True
    return False

# Example usage
str1 = "abcd"
str2 = "cdab"
print(are_rotations(str1, str2)) # Output: True

==============================================================================================================================
Q4. Program to print the first non-repeated character from a string:

==============================================================================================================================

def first_non_repeated_char(s):
    char_counts = {}
    for char in s:
        if char in char_counts:
            char_counts[char] += 1
        else:
            char_counts[char] = 1
    for char in s:
        if char_counts[char] == 1:
            return char
    return None

# Example usage
s = "minimum"
print(first_non_repeated_char(s)) # Output: "n"
==============================================================================================================================
Q5. Program to implement the Tower of Hanoi algorithm:
==============================================================================================================================

def tower_of_hanoi(n, from_rod, to_rod, aux_rod):
    if n == 1:
        print(f"Move disk 1 from rod {from_rod} to rod {to_rod}")
        return
    tower_of_hanoi(n-1, from_rod, aux_rod, to_rod)
    print(f"Move disk {n} from rod {from_rod} to rod {to_rod}")
    tower_of_hanoi(n-1, aux_rod, to_rod, from_rod)

# Example usage
n = 3
tower_of_hanoi(n, 'A', 'C', 'B')

==============================================================================================================================
Q6. Convert postfix to prefix expression:

==============================================================================================================================

# Function to convert postfix to prefix
def postfix_to_prefix(postfix_expr):
    stack = []
    # Iterate through the postfix expression
    for symbol in postfix_expr:
        # If the symbol is an operand, push it onto the stack
        if symbol.isalnum():
            stack.append(symbol)
        else:
            # If the symbol is an operator, pop the top two operands from the stack
            operand2 = stack.pop()
            operand1 = stack.pop()
            # Construct the prefix expression by adding the operator before the operands
            prefix_expr = symbol + operand1 + operand2
            # Push the prefix expression onto the stack
            stack.append(prefix_expr)
    # The final prefix expression is on the top of the stack
    return stack.pop()
==============================================================================================================================
Q7. Convert prefix expression to infix expression:

==============================================================================================================================

# Function to convert prefix to infix
def prefix_to_infix(prefix_expr):
    stack = []
    # Reverse the prefix expression so we can read it from left to right
    prefix_expr = prefix_expr[::-1]
    # Iterate through the prefix expression
    for symbol in prefix_expr:
        # If the symbol is an operand, push it onto the stack
        if symbol.isalnum():
            stack.append(symbol)
        else:
            # If the symbol is an operator, pop the top two operands from the stack
            operand1 = stack.pop()
            operand2 = stack.pop()
            # Construct the infix expression by adding parentheses around the operands and operator
            infix_expr = '(' + operand1 + symbol + operand2 + ')'
            # Push the infix expression onto the stack
            stack.append(infix_expr)
    # The final infix expression is on the top of the stack
    return stack.pop()
==============================================================================================================================
Q8. Check if all the brackets are closed in a given code snippet:
==============================================================================================================================

# Function to check if all brackets are closed
def check_brackets(code_snippet):
    stack = []
    for symbol in code_snippet:
        if symbol in '({[':
            stack.append(symbol)
        elif symbol in ')}]':
            if not stack:
                # If the stack is empty, we have a closing bracket with no corresponding opening bracket
                return False
            opening_bracket = stack.pop()
            if (symbol == ')' and opening_bracket != '(') or \
               (symbol == '}' and opening_bracket != '{') or \
               (symbol == ']' and opening_bracket != '['):
                # If the closing bracket doesn't match the top of the stack, we have a mismatch
                return False
    # If the stack is not empty, we have unclosed brackets
    return not stack
    
==============================================================================================================================
Q9. Reverse a stack:

==============================================================================================================================

# Function to reverse a stack
def reverse_stack(stack):
    reversed_stack = []
    # Pop all items from the input stack and push them onto the reversed stack
    while stack:
        reversed_stack.append(stack.pop())
    return reversed_stack
    
==============================================================================================================================
Q10. Find the smallest number using a stack:

==============================================================================================================================

# Function to find the smallest number in a stack
def find_smallest_number(stack):
    if not stack:
        # If the stack is empty, there is no smallest number
        return None
    smallest_number = stack.pop()
    # Iterate through the stack and update the smallest number
    while stack:
        current_number = stack.pop()
        if current_number < smallest_number:
            smallest_number = current_number
    return smallest_number


